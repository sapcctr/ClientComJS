//call state transition events enum
var evtCall = Object.freeze({
	"Coming": "AddQueueCall",
	"Generic": "Generic",
	"CallOut": "OperCallOut",
	"QueStats": "QueStats",
	"Connected": "AddConnectedCall",
	"Disconnected": "Disconnected",
	"SetActiveCall": "SetActiveCall",
	"ClearActiveCall": "ClearActiveCall",
	"CallOutAlerting": "OperCallOutAlerting"
});

//agent state transition events enum
var evtAgent = Object.freeze({
	"Changed": "OPERATOR_STATUS",
	"Paperwork": "StatusPaperWork",
	"Working": "StatusWorking",
	"Paused": "StatusPause"
});

//server state events
var evtServer = Object.freeze({
	"Removed": "SERVER_REMOVED",
	"Added": "SERVER_ADDED"
});

//singletone object mctabuff (IE only)
try{
	var mctabuff = new ActiveXObject("MCTABUFF.MCTABUFF_buffer");
}catch(err){
	alert(err + " - Make sure that you have this site on trusted sites and you allow activeX to run");
}

//======================================================//
//  Phone connector class								//
//======================================================//
function Phone( clientname ){
	//constructor ...
	var selfinst = this;
	var t = 400; //ms
	var server = "SwitchBoard";
	var type = "CLIENT";
	
	try
	{
		//init the mctabuff with the given client name
		mctabuff.Initialize("NAME=" + clientname + ";SERVER=" + server + ";TYPE=" + type + ";");
		//start the event pump
		window.setInterval(function(){ selfinst.checkBuffer(); }, t)
	}
		catch(err){
		alert(" Phone not ready please refresh with F5 ");
	}
	//.. and Phone connector should be running now ..
	
	//------------------------------------------------------
	//  check buffer method executed by event pump
	//------------------------------------------------------
	this.checkBuffer = function()
	{
		/* Using GetEvent to retrieve the events from MCTABUFF you can set time how long to wait 
		// in script it is safe to use _WAIT=0; so that browser threads are not blocked 
		// It could be an issue if you do many background XHR calls */

		var waits='_WAIT=0;';
		try{
			var retVal = mctabuff.GetEventRet(waits);
		}catch(err){
			console.log("error with reading events from mctabuff");
		}
		
		if (retVal != null){
			var cmsg = new UrlParse(retVal);	
			//this is how u can check "events" generated by CEM
			switch (cmsg["_EVT"]) 
			{
				case evtServer.Added:
					$( document ).trigger( "evtServerState", ["Added", "Phone at your service"]);
				break;

				case evtServer.Removed:
					$( document ).trigger( "evtServerState", ["Removed", "Phone out of service"]);
				break;

				case evtAgent.Changed:
					$( document ).trigger( "evtAgentState",[ cmsg["Status"]]);
				break;

				case "FORWARD_STATUS":
					//console.log("-->FORWARD STATUS: " + retVal);
				break;

				case "chatChanged":
					//console.log(" --> CHAT CHANGED EVT: " + cmsg["STATUS"] + " with Attahced data >>" + cmsg["ATTACHED_DATA"]);
				break;

				case "reroute":
					//console.log("chat reroute Attahced data >>" + cmsg["ATTACHED_DATA"]);
				break;
		   }
		   //this is how u can parse "commands" coming from server
			switch (cmsg["_CMD"]) 
			{
				case evtCall.Coming:
					$( document ).trigger( "evtCallComing", [ cmsg["ANumber"], cmsg["CALL_ID"], cmsg.getjson("ExtraData") ] );
				break;

				case evtCall.CallOutAlerting: 
					$( document ).trigger( "evtCallOutAlerting",[ cmsg["CALL_ID"], cmsg["BNumber"]]);
				break;
				
				case evtCall.Connected:
					$( document ).trigger( "evtCallConnected",[ cmsg["CALL_ID"]]);
				break;

				case evtCall.SetActiveCall:
					$( document ).trigger( "evtSetActiveCall",[ cmsg["CALL_ID"]]);
				break;

				case evtCall.ClearActiveCall:
					$( document ).trigger( "evtClearActiveCall",[ cmsg["CALL_ID"]]);
				break;

				case evtCall.Disconnected:
					$( document ).trigger( "evtCallDisconnected",[ cmsg["CALL_ID"]]);
				break;
				
				case "QueStats":
					$( document ).trigger( "evtQueueStats",[ retVal]);
					//usually useles to check Queue status events
                    //now "missusing" event as timer to do periodic check against agent status
                    mctabuff.Command("_CMD=GET_OPERATOR_STATUS;");
				break;
			}
		}
		retVal = null;
	}

	//------------------------------------------------------
	//  command set agent state
	//------------------------------------------------------
	this.setAgent = function(state){
		var cmd = new UrlParse();
		cmd.put("_CMD", "SET_OPERATOR_STATUS");
		cmd.put("Status", state);
		cmd.put("_SAP_ID", "MCTABUFF");
		mctabuff.Command(cmd.encode());
		//mctabuff.Command("_CMD=SET_OPERATOR_STATUS;Status=" + state + ";_SAP_ID=MCTABUFF;");
	}

	//------------------------------------------------------
	//  call out
	//------------------------------------------------------
	this.callOut = function(nbr){
		if (nbr != "")	
			mctabuff.Command("_CMD=CALL_OUT;ADDR=" + nbr + ";_SAP_ID=MCTABUFF;");
	}

	//------------------------------------------------------
	//  play file
	//------------------------------------------------------
	this.playFile = function(filename){
		if (filename != "")	
			mctabuff.Command("_CMD=PLAY_FILE;Filename=" + filename + ";_SAP_ID=MCTABUFF;");
	}
	
	//------------------------------------------------------
	//  commands: answer, hangup, hold, unhold, transfer...
	//------------------------------------------------------
	this.answer   = function() { mctabuff.Command("_CMD=ANSWER;_SAP_ID=MCTABUFF;")   };
	this.hangup   = function() { mctabuff.Command("_CMD=HANGUP;_SAP_ID=MCTABUFF;")   };	
	this.hold     = function() { mctabuff.Command("_CMD=HOLD;_SAP_ID=MCTABUFF;")     };
	this.unhold	  = function() { mctabuff.Command("_CMD=UNHOLD;_SAP_ID=MCTABUFF;")   };
	this.transfer = function() { mctabuff.Command("_CMD=DO_DIVERT;_SAP_ID=MCTABUFF;")};
}

//========================================================//
//	UrlParse class to handle url-encoded key value pairs  //
//========================================================//
function UrlParse(url){
	var a = {
				stringify:	function()	  {return JSON.stringify(this); },
				get:		function(k)   {return this[k];},
				getjson:	function(k)	  {return JSON.stringify(this[k]); },
				put:		function(k, v){this[k]=v;},
				encode:		this.encode
			}
	this.arr = Object.create(a);
    if (url == undefined) return this.arr; //emtpy constructor without parameter
	this.toJsonValues(url);
	return this.arr
}

//------------------------------------------------------
//  encode - return this UrlParse objects data to 
//	URL encoded string without any functions of course
//------------------------------------------------------
UrlParse.prototype.encode = function(){
	var str = []
	o = this;
	for (k in o) {
		if (o.hasOwnProperty(k)){ 
			if (typeof o[k] === 'object') { //only one level deep object hierarchy handled...
				ii = o[k];
				s = k + "=";
				for (i in ii){
				  s = s + encodeURIComponent(i + "=" + (ii[i]) +";");
				}
				str.push(s);
			}else{
				str.push(encodeURIComponent(k) + "=" + encodeURIComponent(o[k]));
			}
		}
	}
	return str.join(";") //key value string with ";" delimiter
}

//------------------------------------------------------
//  toJsonValues - converts all values to collection arr 
//------------------------------------------------------
UrlParse.prototype.toJsonValues = function(encoded){
	var a = encoded.split(";");
    for (i = 0; i < a.length; i++) {
        if (a[i]) {
            var kv = a[i].split("=");
            var k = kv[0];
            var v = kv[1];
            if (v){ 
				v = v.replace(/\+/g, ' '); // convert "+" -> " " 
				v = decodeURIComponent(v);
				v = v.replace(/(\r\n|\n|\r)/gm,"");//clean-up line feed, no need for dumb keys within
				this.arr[k] = this.valToJson(v);
			}else{ this.arr[k]=""; }
        }
    }
} 

//------------------------------------------------------
//  valToJson - one value to json 
//------------------------------------------------------
UrlParse.prototype.valToJson = function(url) {
    var h;
    var json = {};
    var hashes = url.split(';');
	if (hashes.length > 1){
		for (var i = 0; i < hashes.length; i++) {
			h = hashes[i].split('=');
			if (h[0] != ""){//never add dumb keys 
				if (h[1]){
					json[h[0]] = h[1];
				}else {
					json[h[0]] = "";  //empty val
				}
			}
		}
		return json; //object
	}else{
		return url;  //single string
	}
}
